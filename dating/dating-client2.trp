
import lists
import stdio
import declassifyutil

let 
    fun loop () =
                let  val _ = print "Waiting for response..."
                    val newResponse = receive [hn ("NEWMATCH", newResponse) => newResponse]
                    val _ = printWithLabels ("Response message with following profiles: ", newResponse)
                in 
                    loop ()
                end


    fun client server_id =
        let

            val lev = `{bob}`
            val name = "bob" raisedTo lev
            val year= 2023 raisedTo lev
            val gender = "male" raisedTo lev
            val interests = ["ctf", "pokemons","travel"] raisedTo lev
            val profile = (lev, name, year, gender, interests)

            val agentfn = fn (levA,nameA,yearA,genderA,interestsA) =>
                    let 
                    
                        val levB = declassify_with_block(lev, authority, `{}`)
                        val nameB = declassify_with_block(name, authority, `{}`)
                        val yearB = declassify_with_block(year, authority, `{}`)
                        val genderB = declassify_with_block(gender, authority, `{}`)
                        val interestsB = declassify_with_block(interests, authority, `{}`)
                            
                        val preference = if ("female" = genderA andalso elem("ctf")interestsA)
                            then 
                                true
                            else
                                false

                        val maybeProfile = if (preference) 
                            then
                                (map(fn (x,levx) => x raisedTo levx)[(levB,levA),(nameB,levA),(yearB,levA),(genderB,levA),(interestsB,levA)])
                            else
                                ()

                    in
                        (preference, maybeProfile)
                    end

            val _ = send (server_id, ("NEWPROFILE", (profile, agentfn, self () )))
        in
            loop ()
        end
    
    val serverId = whereis ("@id-server", "datingServer")   
in
    spawn (fn () => client serverId) 
end
