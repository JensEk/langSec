(* Troupe code for a malicious client that can trigger a sleep on the server and announce what level the victim got and identify by that *)

import lists
import stdio
import declassifyutil

let 
    fun loopLevel () =
                let 
                    val mal = receive [hn ("LevelLabel", mal) => mal]
                    val _ = if mal = `{}`
                        then
                            ()
                        else    
                            printWithLabels ("Victim is: ", mal)
                in
                    loopLevel()             
                end

    fun client server_id =
        let
        
            (*Define the profile of the user*)
            val lev = `{}`
            val name = "MALICIOUS1"
            val year = 0
            val gender = false
            val interests = ""
            val profile = (lev, name, year, gender, interests)
            val pid = self()

            val agentfn = fn (levX,nameX,yearX,genderX,interestsX) =>
                    let

                        (*Contacts itself as soon as the function is used, levX is sent to correlate time with a security label *)
                        val _ = send(pid, ("LevelLabel", levX))    
                        val maybeProfile = ()

                        (*if match with the second malicious client a match should be triggered in order to reveal time elapsed indicating data leakage *)
                        val preference = if nameX = "MALICIOUS2"
                                then
                                    true
                                else
                                    false
                        
                        (*if gender is female, then sleep for 20 sec*)
                        val _ = if genderX
                            then
                                sleep 20000
                            else
                                ()
                  
                    in
                        (preference, maybeProfile)
                    end

            val _ = send (server_id, ("NEWPROFILE", (profile, agentfn, self () )))
        in
            loopLevel ()
        end

    val serverId = whereis ("@id-server", "datingServer")   
in
    spawn (fn () => client serverId)
end
